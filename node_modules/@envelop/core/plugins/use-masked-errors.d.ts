import { Plugin } from '@envelop/types';
import { GraphQLError } from 'graphql';
export declare const DEFAULT_ERROR_MESSAGE = "Unexpected error.";
export declare class EnvelopError extends GraphQLError {
    constructor(message: string, extensions?: Record<string, any>);
}
export declare type FormatErrorHandler = (error: GraphQLError | unknown, message: string, isDev: boolean) => GraphQLError;
export declare const formatError: FormatErrorHandler;
export declare type UseMaskedErrorsOpts = {
    /** The function used for format/identify errors. */
    formatError?: FormatErrorHandler;
    /** The error message that shall be used for masked errors. */
    errorMessage?: string;
    /**
     * Additional information that is forwarded to the `formatError` function.
     * The default value is `process.env['NODE_ENV'] === 'development'`
     */
    isDev?: boolean;
};
export declare const useMaskedErrors: (opts?: UseMaskedErrorsOpts | undefined) => Plugin;
